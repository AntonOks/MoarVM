trigger:
- master

pr:
- master

variables:
  # Turn this Powershell console into a developer powershell console.
  # https://intellitect.com/enter-vsdevshell-powershell/
  PWSH_DEV: |
    $installPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationpath
    $devShell    = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find **\Microsoft.VisualStudio.DevShell.dll
    Import-Module $devShell
    Enter-VsDevShell -VsInstallPath $installPath -SkipAutomaticLocation -DevCmdArguments "-arch=amd64"
  RAKUDO_CHECKOUT_TYPE: master
  NQP_CHECKOUT_TYPE: master
  MOAR_CHECKOUT_TYPE: "rev-$(Build.SourceVersion)-selfrepo"

stages:
- stage: Test
  jobs:
    # Keep the job and matrix entry names as short as possible as the webinterface
    # leaves little space for the name.
    - job: T
      strategy:
       matrix:
         Win_MVM:
           IMAGE_NAME: 'windows-2019'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Win_MVM_relocatable:
           IMAGE_NAME: 'windows-2019'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         Mac_MVM:
           IMAGE_NAME: 'macOS-10.15'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Mac_MVM_reloc:
           IMAGE_NAME: 'macOS-10.15'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         Lin_MVM:
           IMAGE_NAME: 'ubuntu-20.04'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Lin_MVM_reloc:
           IMAGE_NAME: 'ubuntu-20.04'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         MVM_gcc_njit:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--no-jit --cc=gcc'
         MVM_gcc:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=gcc'
         MVM_clang_njit:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--no-jit --cc=clang'
         MVM_clang:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=clang'
         MVM_gcc_njit_libffi:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--has-libffi --no-jit --cc=gcc'
         MVM_gcc_libffi:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--has-libffi --cc=gcc'
         MVM_clang_njit_libffi:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--has-libffi --no-jit --cc=clang'
         MVM_clang_libffi:
           IMAGE_NAME: 'ubuntu-20.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--has-libffi --cc=clang'
#         MVM_coverage:
#           IMAGE_NAME: 'ubuntu-20.04'
#           NQP_OPTIONS: '--backends=moar'
#           MOAR_OPTIONS: '--compiler=clang --coverage --optimize=0 --debug=3 --cc=clang'
#           COVERAGE: 'yes'

         MVM_Ub_18_gcc:
           IMAGE_NAME: 'ubuntu-18.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=gcc'
         MVM_Ub_18_clang:
           IMAGE_NAME: 'ubuntu-18.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=clang'

         MVM_Ub_16_gcc:
           IMAGE_NAME: 'ubuntu-16.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=gcc'
         MVM_Ub_16_clang:
           IMAGE_NAME: 'ubuntu-16.04'
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: '--cc=clang'

      pool:
        vmImage: $(IMAGE_NAME)
      workspace:
        clean: all
      timeoutInMinutes: 180
      steps:

        - pwsh: |
            # Windows has a maximum PATH variable length of 2048 (depending on
            # how it's accessed). The length of PATH in AzureCI is already
            # really tight. We'll run into the limit when we add Java and the
            # MS BuildTools to the path.
            # To work around this, we remove a bunch of stuff we won't need
            # from PATH here.
            $shortened_path = "$(PATH)" -replace ';[^;]*(SeleniumWebDrivers|SQL Server|Mercurial|Amazon|mysql|\\sbt\\|NSIS|Windows Performance Toolkit|php|Subversion)[^;]*(?=(;|$))', ''
            echo "##vso[task.setvariable variable=PATH]$shortened_path"
          displayName: "Shorten PATH on Windows"
          condition: eq( variables['Agent.OS'], 'Windows_NT' )

        - script: sudo apt-get install libzstd-dev valgrind
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
          displayName: Install libzstd-dev and valgrind

        - checkout: self
          path: selfrepo
          displayName: Checkout script repo

        - script: perl selfrepo/tools/build/checkout-repos-for-test.pl $(RAKUDO_CHECKOUT_TYPE) $(NQP_CHECKOUT_TYPE) $(MOAR_CHECKOUT_TYPE)
          workingDirectory: $(Pipeline.Workspace)
          displayName: Checkout repositories

        # Build MoarVM
        - script: |
            perl Configure.pl --prefix=../install $(MOAR_OPTIONS)
            make -j2 install
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build MoarVM
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(MOAR_OPTIONS)
            set CL=/MP
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build MoarVM (Windows)

        # Build NQP
        - script: |
            perl Configure.pl --prefix=../install $(NQP_OPTIONS)
            make install
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build NQP
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(NQP_OPTIONS)
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build NQP (Windows)

        # Build Rakudo
        - script: |
            perl Configure.pl --prefix=../install $(RAKUDO_OPTIONS)
            make install
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(RAKUDO_OPTIONS)
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build Rakudo (Windows)

        # TODO: Should use "install moved" instead of "install-moved". But `prove` currently fails with an executable path that contains a space.
        - script: mv install install-moved
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Move installation
        - pwsh: mv install install-moved
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Move installation (Windows)

        # Test NQP
        - script: prove -j2 -r -e ../install/bin/nqp t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test NQP
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -j2 -r -e ..\install\bin\nqp t\nqp t\hll t\qregex t\p5regex t\qast t\moar t\serialization t\nativecall t\concurrency
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test NQP (Windows)
        - script: prove -j2 -r -e ../install-moved/bin/nqp t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test NQP (relocated)
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -j2 -r -e ..\install-moved\bin\nqp t\nqp t\hll t\qregex t\p5regex t\qast t\moar t\serialization t\nativecall t\concurrency
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test NQP (relocated, Windows)

        # Test Rakudo
        - script: prove -j2 -e ../install/bin/raku -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -j2 -e ..\install\bin\raku -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (Windows)
        - script: prove -j2 -e ../install-moved/bin/raku -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (relocated)
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -j2 -e ..\install-moved\bin\raku -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (relocated, Windows)

        - publish: $(Pipeline.Workspace)/install-moved
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ))
          displayName: Publish build artifact

#        - script: |
#            git clone --depth 1 'https://github.com/samcv/MoarVM-cover.git' &&
#            cp -v MoarVM-cover/html-cover.sh . &&
#            cp -v MoarVM-cover/nqp-profile ../nqp/ &&
#            cp -v MoarVM-cover/merge-profraw.sh ../nqp/ &&
#            ./html-cover.sh 2
#          condition: and(succeeded(), eq( variables['COVERAGE'], 'yes' ))
#          displayName: Create coverage report

        - script: |
            valgrind --leak-check=full ../install/bin/raku --full-cleanup -e '' 2>valgrind.log
            cat valgrind.log
            ../install/bin/raku -ne 'BEGIN my @lost; @lost.push($0) if /"lost: " (\d+)/; END exit @lost.elems != 3 || all(@lost) != 0' valgrind.log
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['COVERAGE'], 'yes' ), eq( variables['Agent.OS'], 'Linux' ))
          displayName: Check for memory leaks
